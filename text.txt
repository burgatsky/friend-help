mkdir - создать папку
touch - создать файл
cd - подключиться к папке
git init - создать репозиторий
rm -rf .git - разгитить папку
git status - проверить состояние репозитория
git add - подготовить файлы к сохранению
git commit -m - выполнить коммит ключ -m  "сообщение" (происходит сохранение)
git log -  просмотреть историю коммитов
pbcopy - копирует поток данных в буфер обмена
git remote add - привязать удалённый репозиторий к локальному
git remote -v - проверка, что репозитории связаны
git push -u - загрузить содержимое локального репозитория на GitHub, флаг -u - свяжет локальную ветку с одноимённой удалённой

Хеширование (от англ. hash, «рубить», «крошить», «мешанина») — это способ преобразовать набор данных и получить их «отпечаток» (англ. fingerprint).

Все хеши и таблицу хеш → информация о коммите Git сохраняет в служебные файлы. Они находятся в скрытой папке .git в репозитории проекта.

Получить сокращённый лог — git log --oneline

Файл HEAD (англ. «голова», «головной») — один из служебных файлов папки .git. Он указывает на коммит, который сделан последним (то есть на самый новый).

Статусы:
untracked - англ. «неотслеживаемый»
staged - англ. «подготовленный»
tracked - англ. «отслеживаемый»
modified - англ. «изменённый»

Для файлов в состояниях staged и modified обычно не указывают, что они также tracked, потому что это состояние подразумевается.

Статусом untracked помечается файл, о существовании которого Git знает, но не следит за изменениями в нём. Этот статус — противоположность tracked, в который попадают все файлы, отслеживаемые Git.
Файл переходит в статус staged после выполнения git add.
Статус modified означает, что файл был изменён.

--amend (от англ. amend — «исправить», «дополнить» внести правки в уже сделанный коммит.

Обратите внимание на опцию --no-edit. Она сообщает команде commit, что сообщение коммита нужно оставить как было.

commit --amend с флагом -m - изменить сообщение коммита.

Выполнить unstage изменений — git restore --staged <file>
Вызов git restore --staged example.txt перевёл example.txt из staged обратно в untracked.
«Откатить» коммит — git reset --hard <commit hash/номер коммита(посмотреть можно git log --oneline)>
Если выполнить функцию hard к предпоследнему коммиту, последний будет удален, предпоследний станет последним.
«Откатить» изменения, которые не попали ни в staging, ни в коммит, — git restore <file>
Команда git restore --staged <file> переведёт файл из staged обратно в modified или untracked.
Команда git reset --hard <commit hash> «откатит» историю до коммита с хешем <hash>. Более поздние коммиты потеряются!
Команда git restore <file> «откатит» изменения в файле до последней сохранённой (в коммите или в staging) версии.


